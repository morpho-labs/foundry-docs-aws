name: Generate Foundry docs
author: Morpho Labs
description: Automatically generates the Foundry docs of your smart contracts, uploading them to an AWS S3 bucket
branding:
  icon: info
  color: purple

inputs:
  aws-s3-bucket:
    description: The AWS S3 bucket in which to upload the generated docs book.
    required: true
  aws-cloudfront-distribution-id:
    description: The AWS Cloudfront Distribution ID to invalidate the cache.
    required: false
  aws-access-key-id:
    description: >-
      AWS Access Key ID. This input is required if running in the GitHub hosted environment.
      It is optional if running in a self-hosted environment that already has AWS credentials,
      for example on an EC2 instance.
    required: false
  aws-secret-access-key:
    description: >-
      AWS Secret Access Key. This input is required if running in the GitHub hosted environment.
      It is optional if running in a self-hosted environment that already has AWS credentials,
      for example on an EC2 instance.
    required: false
  aws-session-token:
    description: "AWS Session Token"
    required: false
  aws-region:
    description: "AWS Region, e.g. us-east-2"
    required: true

runs:
  using: composite

  steps:
    - name:
      uses: actions/setup-node@v3
      with:
        node-version: 16
        cache: yarn

    - name: Install Foundry
      uses: onbjerg/foundry-toolchain@v1
      with:
        version: nightly

    - name: Install node dependencies
      run: yarn install --frozen-lockfile
      shell: bash

    - name: Generate docs
      run: forge doc --build
      shell: bash

    - name: Upload docs
      uses: actions/upload-artifact@v3
      with:
        name: forge-docs
        path: docs/book/

    - name: Setup AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-session-token: ${{ inputs.aws-session-token }}
        aws-region: ${{ inputs.aws-region }}

    - name: Upload docs to S3
      run: aws s3 sync docs s3://${{ inputs.aws-s3-bucket }} --delete --acl public-read
      shell: bash

    - name: Invalidate CloudFront cache
      if: ${{ inputs.aws-cloudfront-distribution-id != '' }}
      run: aws cloudfront create-invalidation --distribution-id ${{ inputs.aws-cloudfront-distribution-id }} --paths "/*"
      shell: bash
